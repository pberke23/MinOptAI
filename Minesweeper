import pygame
import random

pygame.init()

# Constants for the grid size and screen dimensions
WIDTH, HEIGHT = 600, 600  # Grid size
GRID_SIZE = 30            # Number of rows/columns
CELL_SIZE = WIDTH // GRID_SIZE  # Size of each cell
FPS = 60  # Frames per second for game loop

# Colors for UI elements
WHITE = (255, 255, 255)
GRAY = (192, 192, 192)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Screen setup for the game window
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Minesweeper")
clock = pygame.time.Clock()  # Game clock to control FPS


def main_menu():
    # Function to display the main menu where the user selects difficulty
    global WIDTH, HEIGHT
    WIDTH, HEIGHT = 600, 400  # Resize screen for the menu
    pygame.display.set_mode((WIDTH, HEIGHT))

    screen.fill(WHITE)  # Fill the screen with white background
    font = pygame.font.SysFont(None, 48)  # Font for the menu options

    # Menu options with corresponding difficulty settings
    options = ["Easy (8x8, 10 Mines)", "Medium (16x16, 40 Mines)", "Hard (16x30, 99 Mines)"]
    buttons = []  # List to store button positions and texts
    y_offset = 150  # Initial vertical offset for the first option

    # Draw the menu options as buttons
    for option in options:
        text = font.render(option, True, BLACK)  # Render the text for each option
        rect = text.get_rect(center=(WIDTH // 2, y_offset))  # Get the rectangle for button placement
        buttons.append((rect, option))  # Store button's rect and option
        pygame.draw.rect(screen, GRAY, rect.inflate(20, 20))  # Draw a rectangle for the button
        screen.blit(text, rect)  # Place the text inside the button
        y_offset += 100  # Move down for the next option

    pygame.display.flip()  # Update the screen

    # Wait for user to click on one of the buttons
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # Check if the user closed the window
                pygame.quit()
                exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x, y = event.pos  # Get mouse click position
                for rect, option in buttons:
                    if rect.collidepoint(x, y):  # Check if the click was on a button
                        if "Easy" in option:
                            return 8, 10  # Return easy grid size and number of mines
                        elif "Medium" in option:
                            return 16, 40  # Return medium grid size and number of mines
                        elif "Hard" in option:
                            return (16,30), 99  # Return hard grid size and number of mines


def create_grid(rows, cols, num_mines):
    # Function to create the game grid with mines and numbers
    grid = [[{"mine": False, "revealed": False, "flagged": False, "number": 0} for _ in range(cols)] for _ in range(rows)]

    # Randomly place mines in the grid
    mines = random.sample(range(rows * cols), num_mines)  # Randomly pick mine locations
    for mine in mines:
        row, col = divmod(mine, cols)  # Convert the flat index to row/col position
        grid[row][col]["mine"] = True  # Mark the cell as containing a mine

    # Calculate the numbers for each non-mine cell based on adjacent mines
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    for r in range(rows):
        for c in range(cols):
            if not grid[r][c]["mine"]:  # Skip cells that contain mines
                grid[r][c]["number"] = sum(
                    grid[r + dr][c + dc]["mine"]
                    for dr, dc in directions
                    if 0 <= r + dr < rows and 0 <= c + dc < cols  # Check boundaries
                )
    return grid  # Return the generated grid


def draw_grid(screen, grid):
    rows, cols = len(grid), len(grid[0])
    x_offset = (WIDTH - (cols * CELL_SIZE)) // 2  # Center the grid horizontally
    y_offset = 50  # Offset grid for UI space
    for r in range(rows):
        for c in range(cols):
            x, y = c * CELL_SIZE + x_offset, r * CELL_SIZE + y_offset  # Adjust for offsets
            pygame.draw.rect(screen, GRAY if grid[r][c]["revealed"] else WHITE, (x, y, CELL_SIZE, CELL_SIZE))  # Draw the cell
            pygame.draw.rect(screen, BLACK, (x, y, CELL_SIZE, CELL_SIZE), 1)  # Cell border

            if grid[r][c]["revealed"]:  # If the cell is revealed, show its content
                if grid[r][c]["mine"]:
                    pygame.draw.circle(screen, RED, (x + CELL_SIZE // 2, y + CELL_SIZE // 2), CELL_SIZE // 4)  # Draw mine
                elif grid[r][c]["number"] > 0:
                    font = pygame.font.SysFont(None, 36)  # Font for the number
                    text = font.render(str(grid[r][c]["number"]), True, BLACK)  # Render the number
                    screen.blit(text, (x + 10, y + 5))  # Position the number inside the cell
            elif grid[r][c]["flagged"]:  # Draw a flag if the cell is flagged
                pygame.draw.polygon(screen, RED, [
                    (x + CELL_SIZE // 4, y + CELL_SIZE // 4),
                    (x + 3 * CELL_SIZE // 4, y + CELL_SIZE // 2),
                    (x + CELL_SIZE // 4, y + 3 * CELL_SIZE // 4)
                ])
    


def game_ui(screen, timer, flagged_count, total_mines):
    # Function to display the game UI: timer, flagged count, and menu button
    font = pygame.font.SysFont(None, 36)
    padding = 20  # Padding for UI elements around the edges

    # Dynamic positions for UI elements
    flags_x = padding  # Position of the flags counter
    timer_x = WIDTH - padding - 150  # Position of the timer
    menu_x = WIDTH // 2.5  # Position of the menu button

    # Draw timer
    timer_text = font.render(f"Time: {timer}s", True, BLACK)
    screen.blit(timer_text, (timer_x, 10))

    # Draw flagged mines counter
    mines_text = font.render(f"Flags: {flagged_count}/{total_mines}", True, BLACK)
    screen.blit(mines_text, (flags_x, 10))

    # Draw menu button in the center
    menu_text = font.render("Menu", True, BLACK)
    menu_rect = menu_text.get_rect(center=(menu_x, 25))
    pygame.draw.rect(screen, GRAY, menu_rect.inflate(20, 10))  # Draw button background
    screen.blit(menu_text, menu_rect)  # Draw the button text

    return menu_rect  # Return the rectangle of the menu button for collision detection


def reveal_cell(grid, row, col):
    # Function to reveal a cell and its surrounding cells if necessary
    try:
        if grid[row][col]["revealed"] or grid[row][col]["flagged"]:  # Check if the cell is already revealed or flagged
            return
    except IndexError:
        print(f"Invalid access: row={row}, col={col}")
        return

    grid[row][col]["revealed"] = True  # Mark the cell as revealed

    # If the revealed cell has no adjacent mines, reveal surrounding cells
    if grid[row][col]["number"] == 0 and not grid[row][col]["mine"]:
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        for dr, dc in directions:
            if 0 <= row + dr < GRID_SIZE and 0 <= col + dc < GRID_SIZE:
                reveal_cell(grid, row + dr, col + dc)


def handle_click(grid, x, y, game_over):
    # Function to handle left mouse button click (reveal a cell or end the game)
    if game_over:
        return False  # Game already over, no further actions

    col, row = x // CELL_SIZE, y // CELL_SIZE  # Convert mouse position to grid position
    cell = grid[row][col]

    if cell["mine"]:
        return True  # Game over if the clicked cell is a mine
    else:
        reveal_cell(grid, row, col)  # Reveal the clicked cell
        return False  # Continue the game


def reveal_all_mines(grid):
    # Function to reveal all the mines on the grid (called when the game is over)
    for row in grid:
        for cell in row:
            if cell["mine"]:
                cell["revealed"] = True


def main():
    # Main function to run the game
    running = True
    while running:
        # Display the menu and get difficulty settings from the player
        grid_size, num_mines = main_menu()

        # Adjust screen size and grid dimensions based on selected difficulty
        global WIDTH, HEIGHT, CELL_SIZE
        CELL_SIZE = 30
        if isinstance(grid_size, tuple):  # For rectangular grids
            rows, cols = grid_size
            WIDTH, HEIGHT = max(650, cols * CELL_SIZE + 200), rows * CELL_SIZE + 100  # Adjust screen size with extra space for button
        else:
            rows = cols = grid_size
            WIDTH, HEIGHT = max(650, cols * CELL_SIZE + 200), rows * CELL_SIZE + 100  # Adjust screen size with extra space for button
        print(grid_size)
        print(rows,cols)
        print(CELL_SIZE)
        
        pygame.display.set_mode((WIDTH, HEIGHT))  # Set screen size based on the grid

        # Initialize the grid with mines and numbers
        grid = create_grid(rows, cols, num_mines)
        game_over = False  # Flag to check if the game is over
        start_time = pygame.time.get_ticks()  # Track the start time for the timer
        flagged_count = 0  # Track the number of flagged cells
        loss_time = None  # Track the time of loss

        in_game = True
        while in_game:
            screen.fill(WHITE)  # Clear the screen each frame

            # Calculate elapsed time since game start
            elapsed_time = (pygame.time.get_ticks() - start_time) // 1000

            # Draw the game grid and UI elements (timer, flags, etc.)
            draw_grid(screen, grid)
            menu_rect = game_ui(screen, elapsed_time if not game_over else loss_time, flagged_count, num_mines)

            # Draw the AI Solver button
            font = pygame.font.SysFont(None, 36)
            ai_button_text = font.render("AI Solver", True, BLACK)
            ai_button_rect = ai_button_text.get_rect(center=(WIDTH /1.75 , 25))
            pygame.draw.rect(screen, GRAY, ai_button_rect.inflate(20, 10))  # Draw button background
            screen.blit(ai_button_text, ai_button_rect)  # Draw the button text

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False  # Exit the game loop
                    in_game = False
                    return
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    x, y = event.pos

                    # Handle menu button click to return to the menu
                    if menu_rect.collidepoint(x, y):
                        in_game = False  # Exit the current game to return to the menu

                    # Handle AI Solver button click
                    if ai_button_rect.collidepoint(x, y):
                        print("AI Solver button clicked!")  # Placeholder for AI solver functionality

                    # Handle grid cell click (left click for revealing and right click for flagging)
                    if y > 50 and not game_over:  # Ensure clicks are below the UI
                        x_offset = (WIDTH - (cols * CELL_SIZE)) // 2
                        y_offset = 50
                        col = (x - x_offset) // CELL_SIZE
                        row = (y - y_offset) // CELL_SIZE
                        if 0 <= row < rows and 0 <= col < cols:  # Ensure within grid bounds
                            if event.button == 1:  # Left click to reveal a cell
                                game_over = handle_click(grid, x - x_offset, y - y_offset, game_over)
                                if game_over:
                                    reveal_all_mines(grid)  # Reveal all mines if game is over
                                    loss_time = elapsed_time  # Record the time of loss
                                    loss_start_time = pygame.time.get_ticks()
                            elif event.button == 3:  # Right click to flag a cell
                                cell = grid[row][col]
                                if not cell["revealed"]:
                                    if cell["flagged"]:
                                        cell["flagged"] = False
                                        flagged_count -= 1
                                    else:
                                        cell["flagged"] = True
                                        flagged_count += 1

            # If the game is over, check if 10 seconds have passed to return to the menu
            if game_over:
                if (pygame.time.get_ticks() - loss_start_time) >= 10000:  # 10 seconds
                    in_game = False

            pygame.display.flip()  # Update the screen
            clock.tick(FPS)  # Maintain the FPS rate

if __name__ == "__main__":
    main()  # Start the game